{"info": {"description": "\nMiddleware to connect GOLEM's Triple Store to a DraCor-like frontend.", "contact": {"name": "Ingo B\u00f6rner", "email": "ingo.boerner@uni-potsdam.de"}, "license": {"name": "GPL-3.0 license", "url": "https://www.gnu.org/licenses/gpl-3.0.html"}, "title": "GOLEM DraCor frontend connector", "version": "1.0"}, "servers": [{"description": "Local Flask", "url": "http://localhost:5000"}], "externalDocs": {"description": "Code on Github", "url": "https://github.com/ingoboerner/golem-dracor-frontend-api"}, "paths": {"/info": {"get": {"summary": "About the service", "description": "Returns information about the service's API", "operationId": "get_info", "responses": {"200": {"description": "Information about the API", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApiInfo"}}}}}}}, "/corpora": {"get": {"summary": "List available corpora", "description": "Returns a list of available corpora", "operationId": "get_corpora", "parameters": [{"in": "query", "name": "include", "description": "Include additional information, e.g. corpus metrics.", "required": false, "example": "metrics", "schema": {"type": "string", "enum": ["metrics"]}}], "responses": {"200": {"description": "Available corpora.", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Corpus"}}}}}, "400": {"description": "Invalid value of parameter \"include\".", "content": {"text/plain": {"schema": {"type": "string"}}}}}}, "put": {"summary": "Load Corpora", "description": "Trigger Loading of Corpora", "operationId": "trigger_loading_corpora", "responses": {"200": {"description": "Successfully loaded corpora."}, "500": {"description": "Something went wrong. Could not load data."}}}}, "/corpora/{corpus_id}": {"get": {"summary": "Corpus Metadata", "description": "Returns metadata on a corpus. Unlike the DraCor API the response does not contain information on included items (works, characters) by default. Use the endpoint ``/corpora/{corpus_id}/characters`` instead.", "operationId": "get_corpus_metadata", "parameters": [{"in": "path", "name": "corpus_id", "description": "ID of the corpus.", "required": true, "example": "potter_corpus", "schema": {"type": "string"}}, {"in": "query", "name": "include", "description": "Include additional information, e.g. characters.", "required": false, "schema": {"type": "string", "enum": ["characters"]}}], "responses": {"200": {"description": "Corpus metadata.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CorpusMetadata"}}}}, "400": {"description": "Invalid value of parameter \"include\".", "content": {"text/plain": {"schema": {"type": "string"}}}}, "404": {"description": "No such corpus. Parameter ``corpus_id`` is invalid. A list of valid values can be retrieved via the ``/corpora`` endpoint.", "content": {"text/plain": {"schema": {"type": "string"}}}}}}}, "/corpora/{corpus_id}/characters": {"get": {"summary": "Corpus Characters", "description": "Returns characters in a corpus", "operationId": "get_corpus_characters", "parameters": [{"in": "path", "name": "corpus_id", "description": "ID of the corpus.", "required": true, "example": "potter_corpus", "schema": {"type": "string"}}], "responses": {"200": {"description": "Corpus metadata.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CorpusMetadata"}}}}, "404": {"description": "No such corpus. Parameter ``corpus_id`` is invalid. A list of valid values can be retrieved via the ``/corpora`` endpoint.", "content": {"text/plain": {"schema": {"type": "string"}}}}}}}, "/db": {"post": {"summary": "Load data", "description": "Load data into the triple store", "operationId": "ingest_data", "parameters": [{"in": "query", "name": "graph", "description": "Name of the target graph. Default graph is \"https://golemlab.eu/data\".", "required": false, "default": "https://golemlab.eu/data", "schema": {"type": "string"}}], "requestBody": {"description": "Data to load.", "required": true, "content": {"application/x-turtle": {"schema": {"type": "string"}}}}, "responses": {"201": {"description": "Successfully ingested data."}, "400": {"description": "No data included in the request body. Can not load data."}, "500": {"description": "Something went wrong. Could not load data."}}}, "delete": {"summary": "Delete Named Graph", "description": "Delete a named graph from the triple store", "operationId": "delete_graph", "parameters": [{"in": "query", "name": "graph", "description": "Name of the graph to delete. Default graph is \"https://golemlab.eu/data\".", "required": true, "default": "https://golemlab.eu/data", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successfully deleted graph."}, "400": {"description": "Graph to delete is not specified."}, "500": {"description": "Something went wrong. Could not delete the graph."}}}}}, "openapi": "3.0.3", "components": {"schemas": {"ApiInfo": {"type": "object", "properties": {"description": {"type": "string"}, "version": {"type": "string"}, "name": {"type": "string"}}}, "CorpusMetrics": {"type": "object", "properties": {"paragraphs": {"type": "integer"}, "comments": {"type": "integer"}, "wordsInComments": {"type": "integer"}, "characters": {"type": "integer"}, "male": {"type": "integer"}, "nonbinary": {"type": "integer"}, "female": {"type": "integer"}, "documents": {"type": "integer"}, "chapters": {"type": "integer"}, "wordsInDocuments": {"type": "integer"}}}, "ExternalReference": {"type": "object", "properties": {"type": {"type": "string"}, "ref": {"type": "string"}}}, "Author": {"type": "object", "properties": {"id": {"type": "string"}, "refs": {"$ref": "#/components/schemas/ExternalReference"}, "authorName": {"type": "string"}, "uri": {"type": "string"}}}, "Character": {"type": "object", "properties": {"createdYear": {"type": "integer"}, "sourceUrl": {"type": "string"}, "authors": {"$ref": "#/components/schemas/Author"}, "characterGender": {"type": "string", "enum": ["male", "female", "nonbinary"]}, "numDocuments": {"type": "integer"}, "characterCsvUrl": {"type": "string"}, "sourceName": {"type": "string"}, "uri": {"type": "string"}, "firstFanficYear": {"type": "integer"}, "id": {"type": "string"}, "refs": {"$ref": "#/components/schemas/ExternalReference"}, "characterName": {"type": "string"}, "characterType": {"type": "string", "enum": ["canon", "fanon"]}}}, "Corpus": {"type": "object", "properties": {"acronym": {"type": "string"}, "repository": {"type": "string"}, "corpusName": {"type": "string"}, "licenceUrl": {"type": "string"}, "uri": {"type": "string"}, "metrics": {"$ref": "#/components/schemas/CorpusMetrics"}, "characters": {"$ref": "#/components/schemas/Character"}, "id": {"type": "string"}, "licence": {"type": "string"}, "corpusDescription": {"type": "string"}}}}}}