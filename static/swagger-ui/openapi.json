{"info": {"description": "\nMiddleware to connect POSTDATA to a DraCor-like frontend.", "contact": {"name": "Ingo B\u00f6rner", "email": "ingo.boerner@uni-potsdam.de"}, "license": {"name": "GPL-3.0 license", "url": "https://www.gnu.org/licenses/gpl-3.0.html"}, "title": "Poecor POSTDATA connector", "version": "1.0"}, "servers": [{"description": "Local Flask", "url": "http://localhost:5000"}, {"description": "Production", "url": "https://poecor.org/api"}, {"description": "Staging", "url": "https://staging.poecor.org/api"}], "externalDocs": {"description": "Code on Github", "url": "https://github.com/dh-network/postdata-2-dracor-api"}, "paths": {"/info": {"get": {"summary": "About the service", "description": "Returns information about the service's API", "operationId": "get_info", "responses": {"200": {"description": "Information about the API", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApiInfo"}}}}}}}, "/corpora": {"get": {"summary": "List available corpora", "description": "Returns a list of available corpora", "operationId": "get_corpora", "parameters": [{"in": "query", "name": "include", "description": "Include additional information, e.g. corpus metrics.", "required": false, "example": "metrics", "schema": {"type": "string", "enum": ["metrics"]}}], "responses": {"200": {"description": "Available corpora.", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/CorpusMetadata"}}}}}, "400": {"description": "Invalid value of parameter \"include\".", "content": {"text/plain": {"schema": {"type": "string"}}}}}}}, "/corpora/{corpusname}": {"get": {"summary": "Corpus Metadata", "description": "Returns metadata on a corpus. Unlike the DraCor API the response does not contain information on included corpus items (poems). Use the endpoint ``/corpora/{corpusname}/poems`` instead.", "operationId": "get_corpus_metadata", "parameters": [{"in": "path", "name": "corpusname", "description": "Name/ID of the corpus.", "required": true, "example": "postdata", "schema": {"type": "string"}}], "responses": {"200": {"description": "Corpus metadata.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CorpusMetadata"}}}}, "404": {"description": "No such corpus. Parameter ``corpusname`` is invalid. A list of valid values can be retrieved via the ``/corpora`` endpoint.", "content": {"text/plain": {"schema": {"type": "string"}}}}}}}, "/corpora/{corpusname}/poems": {"get": {"summary": "Corpus Contents", "description": "Returns metadata on the poems contained in a corpus. Because generating the metadata of all poems in a large corpus is quite cost intensive, per default only 500 items will be returned. Use parameters ``limit`` and ``offset`` accordingly to get the full number of included poems. An alternative would be to request all IDs of poems using the `/corpora/{corpusname}/ids` endpoint.", "operationId": "get_corpus_content", "parameters": [{"in": "path", "name": "corpusname", "description": "Name/ID of the corpus.", "required": true, "example": "postdata", "schema": {"type": "string"}}, {"in": "query", "name": "limit", "description": "Number of items to return.", "example": 20, "default": 500, "schema": {"type": "integer"}}, {"in": "query", "name": "offset", "description": "number of item to start with. Counting starts at ``0``.", "default": 0, "schema": {"type": "integer"}}, {"in": "query", "name": "include", "description": "include additional information, e.g. information on author(s) of a poem.", "required": false, "example": "authors", "schema": {"type": "string", "enum": ["authors"]}}], "responses": {"200": {"description": "Set of metadata items.", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/PoemMetadata"}}}}}, "400": {"description": "Invalid value of parameter \"limit\". Max. number of items to be returned is 500.", "content": {"text/plain": {"schema": {"type": "string"}}}}, "404": {"description": "No such corpus. Parameter ``corpusname`` is invalid. A list of valid values can be retrieved via the ``/corpora`` endpoint.", "content": {"text/plain": {"schema": {"type": "string"}}}}}}}}, "openapi": "3.0.3", "components": {"schemas": {"ApiInfo": {"type": "object", "properties": {"version": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}}}, "CorpusMetrics": {"type": "object", "properties": {"grammatical_syllables": {"type": "integer"}, "authors": {"type": "integer"}, "metrical_syllables": {"type": "integer"}, "stanzas": {"type": "integer"}, "verses": {"type": "integer"}, "words": {"type": "integer"}, "poems": {"type": "integer"}}}, "CorpusMetadata": {"type": "object", "properties": {"metrics": {"$ref": "#/components/schemas/CorpusMetrics"}, "name": {"type": "string"}, "title": {"type": "string"}, "description": {"type": "string"}}}, "AuthorMetadata": {"type": "object", "properties": {"name": {"type": "string"}, "uri": {"type": "string"}}}, "PoemMetadata": {"type": "object", "properties": {"sourceUri": {"type": "string"}, "id": {"type": "string"}, "authors": {"type": "array", "items": {"$ref": "#/components/schemas/AuthorMetadata"}}, "uri": {"type": "string"}, "name": {"type": "string"}, "source": {"type": "string"}}}}}}