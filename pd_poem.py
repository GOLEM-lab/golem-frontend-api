from util import shorthash
from poem import Poem
from sparql import DB
from pd_stardog_queries import PoemTitle, PoemCreationYear


class PostdataPoem(Poem):
    """POSTDATA Poem

    Attributes:
        uri (str): URI of the poem in the POSTDATA Knowledge Graph.
        id (str): ID generated by creating an 8 character shortened md5 hash of the URI.
        name (str): Name of the poem. A combination of author and title.
        database (DB): Database connection. Instance of class DB.
    """

    # uri of the poem
    uri = None

    # Database connection
    database = None

    # ID generated by creating an 8 character shortened md5 hash of the URI
    id = None

    # Name of the Poem, a combination of author and title
    name = None

    # View of the poem in POSTDATAs Poetry Lab
    poetry_lab_url = None

    # SPARQL Queries:
    # Title of the Poem – used in: get_title()
    sparql_title = PoemTitle()
    # Year of Creation – used in: get_creation_year()
    sparql_creation_year = PoemCreationYear()

    def __init__(self, uri: str = None, database: DB = None):
        """Initialize poem

        Args:
            uri (str): URI of a poem.
            database (DB): connection to a triple store. Use instance of class DB.
        """
        if uri:
            self.uri = uri

        # Generate additional identifiers
        if self.uri:
            # a poem can be identified by the full URI or a shorted md5 hash. The corpus has a lookup method to
            # look up the full uri by this identifier
            self.__generate_id_by_uri()
            # poem name: author and poem/title part joined by "_"
            self.__generate_name_by_uri()

        if database:
            self.database = database

    def __generate_id_by_uri(self) -> bool:
        """Helper method to generate a short md5 hash from the URI

        Create a md5 hash and trunctate it. This is handled by the shorthash function from the util module.

        Returns:
            bool: True if successful.
        """
        if self.uri:
            self.id = shorthash(self.uri)
            return True

    def __generate_name_by_uri(self) -> bool:
        """Helper method to generate a poem name

        Extract author and title/poem part from the URI and join them with "_" and
        store it to the class' "name" attribute.

        The uri "http://postdata.linhd.uned.es/resource/pw_juana-ines-de-la-cruz_sabras-querido-fabio" will result in
        "juana-ines-de-la-cruz_sabras-querido-fabio"

        Returns:
            bool: True if successful.
        """
        if self.uri:
            author_poem = self.__split_uri_in_author_poem_parts()
            self.name = "_".join(author_poem)
            return True

    def get_title(self) -> str:
        """Get the title of the poem.

        Uses a SPARQL Query of class "PoemTitle" of the module "pd_stardog_queries".

        Returns:
            str: Title of the poem.
        """
        if self.title:
            return self.title
        else:
            if self.database:
                # Use the SPARQL Query of class "PoemTitle" (set as attribute of this class)
                if self.uri:
                    # inject the URI of the poem into the query
                    self.sparql_title.inject([self.uri])
                else:
                    raise Exception("No URI of the poem specified. Can not get any attributes.")
                self.sparql_title.execute(self.database)
                title_list = self.sparql_title.results.simplify()
                if len(title_list) == 1:
                    self.title = title_list[0]
                    return self.title
                else:
                    raise Exception("Poem has multiple titles. Not implemented.")
            else:
                raise Exception("Database Connection not available.")

    def get_creation_year(self) -> str:
        """Get the year of creation of a poem.

        Uses a SPARQL Query of class "PoemCreationYear" of the module "pd_stardog_queries".

        Attention: If there are multiple values, only one (the first of the list returned by the query) is returned.

        Returns:
            str: Year of the creation. It must not be assumed that the returned string value can be automatically cast
                into a date data type, because the returned value might also contain a marker of uncertainty, e.g.
                "¿?", but also "¿Ca. 1580?" or "¿1603?".
        TODO: find out, which modifiers of uncertainty might be returned.
        """
        if self.creation_year:
            return self.creation_year
        else:
            if self.database:
                # Use the SPARQL Query of class "PoemCreationYear" (set as attribute of this class)
                if self.uri:
                    # inject the URI of the poem into the query
                    self.sparql_creation_year.inject([self.uri])
                else:
                    raise Exception("No URI of the poem specified. Can not get any attributes.")
                self.sparql_creation_year.execute(self.database)
                data = self.sparql_creation_year.results.simplify()
                if len(data) == 0:
                    self.creation_year = None
                elif len(data) == 1:
                    self.creation_year = data[0]
                else:
                    raise Exception("Multiple values for creation year. Not implemented.")

                return self.creation_year

            else:
                raise Exception("Database Connection not available.")

    def __split_uri_in_author_poem_parts(self) -> list:
        """Helper method to split the poem URL into an author- and a poem part.

        The uri "http://postdata.linhd.uned.es/resource/pw_juana-ines-de-la-cruz_sabras-querido-fabio" is split into:
        "juana-ines-de-la-cruz" (author part) and "sabras-querido-fabio" (poem part)

        Returns:
            list: First item is the author part, second the poem part.
        """
        if self.uri:
            author_part = self.uri.split("_")[1]
            poem_part = self.uri.split("_")[2]
            return [author_part, poem_part]
        else:
            raise Exception("URI of the poem has not been defined.")

    def get_poetry_lab_url(self, base_url: str = "http://poetry.linhd.uned.es:3000", lang: str = "en") -> str:
        """Convert the URI of a poem into a link to POSTDATAs Poetry Lab Platform

        Args:
            base_url: Base URL of POSTDATAs Poetry Lab. Defaults to "http://poetry.linhd.uned.es:3000".
            lang (str): language version of Poetry Lab. Allowed values "en", "es". Defaults to "en".

        Returns:
            str: URL to access the poem in Poetry Lab.
        """
        if self.poetry_lab_url:
            return self.poetry_lab_url
        else:
            # use the function to split up the URI into an author and a poem part
            author_poem = self.__split_uri_in_author_poem_parts()
            author_part = author_poem[0]
            poem_part = author_poem[1]
            self.poetry_lab_url = f"{base_url}/{lang}/author/{author_part}/poetic-work/{poem_part}"
            return self.poetry_lab_url

