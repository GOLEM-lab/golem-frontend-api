info:
  description: '

    Middleware to connect POSTDATA to a DraCor-like frontend.'
  contact:
    name: "Ingo B\xF6rner"
    email: ingo.boerner@uni-potsdam.de
  license:
    name: GPL-3.0 license
    url: https://www.gnu.org/licenses/gpl-3.0.html
  title: Poecor POSTDATA connector
  version: '1.0'
servers:
- description: Local Flask
  url: http://localhost:5000
- description: Production
  url: https://poecor.org/api
- description: Staging
  url: https://staging.poecor.org/api
externalDocs:
  description: Code on Github
  url: https://github.com/dh-network/postdata-2-dracor-api
paths:
  /info:
    get:
      summary: About the service
      description: Returns information about the service's API
      operationId: get_info
      responses:
        '200':
          description: Information about the API
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiInfo'
  /corpora:
    get:
      summary: List available corpora
      description: Returns a list of available corpora
      operationId: get_corpora
      parameters:
      - in: query
        name: include
        description: Include additional information, e.g. corpus metrics.
        required: false
        example: metrics
        schema:
          type: string
          enum:
          - metrics
      responses:
        '200':
          description: Available corpora.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CorpusMetadata'
        '400':
          description: Invalid value of parameter "include".
          content:
            text/plain:
              schema:
                type: string
  /corpora/{corpusname}:
    get:
      summary: List corpus content
      description: Returns a list poems in a corpus
      operationId: get_corpus
      parameters:
      - in: path
        name: corpusname
        description: Name/ID of the corpus.
        required: true
        example: postdata
        schema:
          type: string
openapi: 3.0.3
components:
  schemas:
    ApiInfo:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        version:
          type: string
    CorpusMetrics:
      type: object
      properties:
        poems:
          type: integer
        metrical_syllables:
          type: integer
        grammatical_syllables:
          type: integer
        words:
          type: integer
        authors:
          type: integer
        stanzas:
          type: integer
        verses:
          type: integer
    CorpusMetadata:
      type: object
      properties:
        name:
          type: string
        title:
          type: string
        description:
          type: string
        metrics:
          $ref: '#/components/schemas/CorpusMetrics'
